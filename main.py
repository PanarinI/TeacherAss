import streamlit as st
from pdf2image import convert_from_bytes
from openai import OpenAI
import os
from dotenv import load_dotenv
import base64
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞
API_KEY = os.getenv("API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=API_KEY, base_url=BASE_URL)

st.title("üìö AI-–ü–æ–º–æ—â–Ω–∏–∫ –£—á–∏—Ç–µ–ª—è (GPT-4o)")
st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–ª–∞–Ω —É—Ä–æ–∫–∞")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª", type=["pdf"])
lesson_number = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Unit 1B)").strip()
method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É", ["Test-Teach-Test", "PPP", "Task-based Learning"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def encode_image(img):
    buffered = BytesIO()
    img.save(buffered, format="PNG")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    img_base64 = base64.b64encode(buffered.getvalue()).decode("utf-8")  # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    return f"data:image/png;base64,{img_base64}"  # –î–æ–±–∞–≤–ª—è–µ–º data-URI


if uploaded_file and lesson_number and method:
    with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."):
        # –ß–∏—Ç–∞–µ–º PDF –∫–∞–∫ –±–∞–π—Ç—ã
        pdf_bytes = uploaded_file.read()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = convert_from_bytes(pdf_bytes, poppler_path=r"F:\poppler-24.08.0\Library\bin")

        st.write("üì∏ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ", len(images), "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF.")

        combined_text = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        for index, img in enumerate(images):
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.write(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {index + 1} –≤ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            img_base64 = encode_image(img)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ OpenAI
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": "You are an AI assistant that can see and interpret pages."},
                          {"role": "user", "content": f"–ù–∞–π—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ä–∞–∑–¥–µ–ª {lesson_number}"}]
            )

            extracted_text = response.choices[0].message.content
            st.write(f"üîç –û—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {index + 1}: {extracted_text[:200]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤

            combined_text += extracted_text  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–±—Ä–∞–Ω
        st.write("üìÑ –°–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", combined_text[:500])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–∞–π–¥–µ–Ω —É—Ä–æ–∫
        if f"Unit {lesson_number}" in combined_text or f"Lesson {lesson_number}" in combined_text:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞
            prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Ä–æ–∫–æ–≤. –°–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É {method} –Ω–∞ –±–∞–∑–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.

            Lesson Material:
            {combined_text}
            """

            st.write("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞...")

            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": "You are a professional lesson planner."},
                          {"role": "user", "content": prompt}]
            )

            st.success("‚úÖ –ü–ª–∞–Ω —É—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω!")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", response.choices[0].message.content, height=300)
        else:
            st.error("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")
            st.write("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º", lesson_number)
