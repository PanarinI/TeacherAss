import os
import logging
import tempfile
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
import gradio as gr
from docx import Document
import requests
from typing import Optional


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
load_dotenv()
api_key = os.getenv("API_KEY_openai")
client = OpenAI(api_key=api_key) if api_key else None
VS_ID = os.getenv("VECTOR_STORE_ID", "")  # vector store for file_search if needed

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def upload_to_catbox(file_bytes: bytes) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ catbox.moe –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    try:
        response = requests.post(
            "https://catbox.moe/user/api.php",
            files={"fileToUpload": file_bytes},
            data={"reqtype": "fileupload"},
            timeout=10
        )
        response.raise_for_status()
        return response.text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise gr.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


def generate_docx(text: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ .docx –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å"""
    doc = Document()
    for line in text.split("\n"):
        doc.add_paragraph(line)
    tmp = tempfile.gettempdir()
    path = os.path.join(tmp, f"lesson_plan_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx")
    doc.save(path)
    return path

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
def generate_lesson_plan(
        image_path: Optional[str],
        textbook: str,
        cefr: str,
        topic: str,
        goal: str,
        format_type: str,
        num_students: int,
        age: str,
        adults: bool,
        level_match: int,
        duration: int,
        inventory: str,
        methodology: str,
        hw_required: bool,
        web_search: bool,
        repetition: bool,
        application: bool,
        analysis: bool,
        creativity: bool
) -> str:

    # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
    if not client:
        raise gr.Error("API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not image_path:
        return "‚ùó –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–±–Ω–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º URL
    try:
        with open(image_path, "rb") as f:
            image_url = upload_to_catbox(f.read())
    except Exception as e:
        logging.error(f"Image upload error: {e}")
        raise gr.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π prompt
    lesson_params = {
        'methodology': methodology,
        'textbook': textbook,
        'cefr': cefr,
        'topic': topic,
        'goal': goal,
        'num_students': num_students,
        'age': '–í–∑—Ä–æ—Å–ª—ã–µ' if adults else age,
        'level_match': ['below', 'on-level', 'above', 'mixed'][level_match],
        'duration': duration,
        'inventory': inventory,
        'hw_required': hw_required
    }

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    from app.prompt_builder.prompt import build_prompt
    full_prompt = build_prompt(lesson_params)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ API
    input_content = [
        {
            "type": "input_text",
            "text": full_prompt
        },
        {
            "type": "input_image",
            "image_url": image_url,
            "detail": "high"
        }
    ]

    # –û–ø—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tools = []
    tool_choice = None
    if web_search:
        tools.append({
            "type": "web_search_preview",
            "search_context_size": "medium",
            "user_location": {"type": "approximate", "country": "RU"}
        })
        tool_choice = {"type": "web_search_preview"}

    # –í—ã–∑–æ–≤ LLM
    try:
        response = client.responses.create(
            input=input_content,
            model="gpt-4o-mini",
            tools=tools or None,
            tool_choice=tool_choice,
            max_output_tokens=2000,
            stream=False
        )
        return response.output_text

    except Exception as e:
        logging.error(f"Generation error: {e}")
        raise gr.Error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")


# --- Gradio UI ---
with gr.Blocks(title="AI-–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Ä–æ–∫–æ–≤ –ø–æ —Ñ–æ—Ç–æ —É—á–µ–±–Ω–∏–∫–∞") as app:
    advanced_settings_visible = gr.State(False)     # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∞
    with gr.Row():
        with gr.Column(scale=1):  # –ª–µ–≤—ã–π –±–ª–æ–∫
            image = gr.Image(label="–§–æ—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–±–Ω–∏–∫–∞*", type="filepath")

            # –ë–ª–æ–∫ 1: –£—á–µ–±–Ω–∏–∫
            with gr.Column(variant="panel"):
                gr.Markdown("### üìö –£—á–µ–±–Ω–∏–∫", elem_classes=["block-title"])
                textbook = gr.Textbox(label="–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–∏–∫–∞", placeholder="English File Beginner")
                cefr = gr.Dropdown(label="CEFR-—É—Ä–æ–≤–µ–Ω—å", choices=["", "A1", "A2", "B1", "B2", "C1", "C2"],
                                   value="", info="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å")

            # –ë–ª–æ–∫ 2: –ö–ª–∞—Å—Å
            with gr.Column(variant="panel"):
                gr.Markdown("### üë• –ö–ª–∞—Å—Å", elem_classes=["block-title"])
                format_type = gr.Radio(label="–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è*", choices=["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", "–ì—Ä—É–ø–ø–æ–≤–æ–µ"],
                                       value="–ì—Ä—É–ø–ø–æ–≤–æ–µ")

                with gr.Group(visible=True) as group_settings:
                    num_students = gr.Slider(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤*", minimum=1, maximum=40,
                                             value=10, step=1, info="–î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")

                with gr.Group() as age_group:
                    age = gr.Textbox(label="–í–æ–∑—Ä–∞—Å—Ç*", placeholder="10‚Äì11", interactive=True)
                    adults = gr.Checkbox(label="–í–∑—Ä–æ—Å–ª—ã–µ")

                level_match = gr.Slider(label="–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è —É—á–µ–±–Ω–∏–∫–∞", minimum=0, maximum=3,
                                        step=1, value=1, info="0=–Ω–∏–∂–µ,1=—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç,2=–≤—ã—à–µ,3=—Å–º–µ—à–∞–Ω–Ω—ã–π")

            # –ë–ª–æ–∫ 3: –ó–∞–Ω—è—Ç–∏–µ
            with gr.Column(variant="panel"):
                gr.Markdown("### üìÑ –ó–∞–Ω—è—Ç–∏–µ", elem_classes=["block-title"])
                topic = gr.Textbox(label="–¢–µ–º–∞", placeholder="Daily routines")
                goal = gr.Textbox(label="–¶–µ–ª—å", placeholder="–ü—Ä–∞–∫—Ç–∏–∫–∞ Present Simple")
                duration = gr.Slider(label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)*", minimum=30, maximum=180, value=60, step=5)
                inventory = gr.Textbox(label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", placeholder="–ö–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–æ–µ–∫—Ç–æ—Ä...")

            # –ë–ª–æ–∫ 4: –ú–µ—Ç–æ–¥–∏–∫–∞
            with gr.Column(variant="panel"):
                gr.Markdown("### üéì –ú–µ—Ç–æ–¥–∏–∫–∞", elem_classes=["block-title"])
                methodology = gr.Dropdown(label="–ú–µ—Ç–æ–¥–∏–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è*",
                                          choices=["PPP (Presentation-Practice-Production)",
                                                   "TTT (Test-Teach-Test)"],
                                          value="PPP (Presentation-Practice-Production)")

                advanced_btn = gr.Button(value="‚ûï –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", size="sm")

                # –ë–ª–æ–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
                with gr.Column(visible=False) as advanced_block:
                    gr.Markdown("**üí° –£—Ä–æ–≤–Ω–∏ –∑–∞–¥–∞—á (—Ç–∞–∫—Å–æ–Ω–æ–º–∏—è):**")
                    repetition = gr.Checkbox(label="–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ")
                    application = gr.Checkbox(label="–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")
                    analysis = gr.Checkbox(label="–ê–Ω–∞–ª–∏–∑")
                    creativity = gr.Checkbox(label="–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ")

                hw_required = gr.Checkbox(label="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
                web_search = gr.Checkbox(label="–î–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")

            btn = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", variant="primary", size="lg")

        with gr.Column(scale=2):  # –ø—Ä–∞–≤—ã–π –±–ª–æ–∫
            output = gr.Markdown("## –ü–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...")
            download_btn = gr.DownloadButton(label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .docx", visible=False)



    # --- –õ–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
    def toggle_advanced_settings(visible):
        return gr.update(visible=not visible), not visible


    advanced_btn.click(
        fn=toggle_advanced_settings,
        inputs=[advanced_settings_visible],
        outputs=[advanced_block, advanced_settings_visible]
    )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è
    def toggle_format(selected_format):
        return gr.update(visible=selected_format == "–ì—Ä—É–ø–ø–æ–≤–æ–µ")
    format_type.change(fn=toggle_format, inputs=format_type, outputs=group_settings)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    def toggle_age(adult_checked):
        return gr.update(interactive=not adult_checked)
    adults.change(fn=toggle_age, inputs=adults, outputs=age)

    all_inputs = [
        image,  # Gradio –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç image_path –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        textbook,
        cefr,
        topic,
        goal,
        format_type,
        num_students,
        age,
        adults,
        level_match,
        duration,
        inventory,
        methodology,
        hw_required,
        web_search,
        repetition,
        application,
        analysis,
        creativity
    ]

    # –ö–æ–ª–ª–±–µ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    def on_generate(
            image_path: Optional[str],  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ image
            textbook: str,
            cefr: str,
            topic: str,
            goal: str,
            format_type: str,
            num_students: int,
            age: str,
            adults: bool,
            level_match: int,
            duration: int,
            inventory: str,
            methodology: str,
            hw_required: bool,
            web_search: bool,
            repetition: bool,
            application: bool,
            analysis: bool,
            creativity: bool
    ):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not image_path or (not adults and not age):
            return gr.update(value="‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)"), gr.update(visible=False)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
        kwargs = locals()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
        text = generate_lesson_plan(**kwargs)

        # –°–æ–∑–¥–∞–Ω–∏–µ DOCX
        docx_path = generate_docx(text) if not text.startswith("‚ùó") else None
        return gr.update(value=text), gr.update(visible=bool(docx_path), value=docx_path)

    btn.click(
        fn=on_generate,
        inputs=all_inputs,
        outputs=[output, download_btn]
    )

if __name__ == "__main__":
    app.launch()